;LCD modo 4 bits, 2 linha - Matriz 7x5 e 8x5; vcc -> 5V

;--------------------------------------------------------------------------------------------------------------------------------------------------
;Esta é uma biblioteca do LCD com interface de 4 Bits para o uC 8051, os pinos foram definodos no port1 a fim de evitar sobrescreve funções especiais 
;como as do p0 e p2 relacionados a memoria externa e P3 com suas funcionalidade. O módulo LCD permite um ajuste na intensidade da luz emitida ou  ;ajuste  de contraste, isto é possível variando-se a tensão no pino 3 (V0, com um potenciometro). É feito um processo de inicialização toda vez que
;o LCD é ligado pra sincronizar a uC do modulo ao micro que enviara as informações. Isso é feito recorrentemete antes de qualquer operação que 
;envolva o LCD, para que então possa ser feito seu uso.Apos o mapemanto chamamo a LCD_init que faz a inicialização e depois direcionamos a rotina
;principal.
;--------------------------------------------------------------------------------------------------------------------------------------------------
	D7	equ	p1.7
	D6	equ	p1.6
	D5	equ	p1.5
	D4	equ	p1.4
	RS	equ	P1.3
	RW	equ	P1.2
	E	equ	P1.1
	
	org		0000h
	mov		P1,#00h
	acall	lcd_init
	jmp 	loop

;--------------------------------------------------------------------------------------------------------------------------------------------------
;Apos a inicialização temos a rotina de loop, momento onde ja se pode fazer as operações, para teste utilizamos da rotina "position" para escrever o 
;caracter 'a' atraves do send_data. O compilador MCU entende essa notação e em nivel de OPCODE, carrega o Acumulador com o binario Asci, binario ao 
;qual é enviado e interpretado pelo LCD. O LCD 16x2 hitachi idealizado entende seus caracteres Como Asci.
;--------------------------------------------------------------------------------------------------------------------------------------------------
loop:
	mov 	B,#10000011B
	call	position
	MOVC	A,#'a'
	call	send_data
	jmp 	$
	
;--------------------------------------------------------------------------------------------------------------------------------------------------
;Nesta inicialização aguardamos cerca de 30ms antes de manda o primeiro niblle 3h (0011B). o Envio 'manual' é feito da seguinte forma: colocamos 
;os valores associados nos pinos D7-D4 e momento em que setamos o Enable ele valida o dado (esse tempo em higth tem que ter pelo menos 230ns segundo
;o data sheet do hitachi), apos esse sinal esperamos 1us com o nop e damos o um clear novamente no enable, possibilitando que possamos escreve os dados 
;no pino novamente. é feito o envio desses nible mais duas vezes posterior a um delay de 15ms. No quarto mandamos 02h e a partir dai verificamos o buzy
;em todas as operações. 
;A primeira operação é funcion set (0010 1000B = 001Y NFXX ), onde Y significa a interface (Y=0, 4bits), N o numero de linhas (N=1, 2 linhas) e F     ;a matriz de caracter (F=0, 5x7). 
;A segunda operação é a entrymodeset (0000 0110B = 0000 01XS) Estabelece o sentido de deslocamento do cursor (X=0 p/ esquerda, X=1 p/ direita)
;Estabelece se a mensagem deve ou não ser deslocada com a entrada de um novo, caracter (S=1 SIM, X=1 p/ direita) 
;Note que ja estamos enviando bytes não nibles como antes. Esse byte é enviado em niblles em send_inst. Display e clear foram feitos como rotina 
;por que podem ser usados fora da inicialiazação 
;--------------------------------------------------------------------------------------------------------------------------------------------------
lcd_init:
	acall	delay15ms
	acall	delay15ms
	setb	D4	
	setb	D5
	clr	D6
	clr	D7	;0011
	setb	E
	nop	

	clr	E

	acall	delay15ms
	setb	D4	
	setb	D5
	clr	D6
	clr	D7	;0011
	setb	E
	nop	

	clr	E

	acall	delay15ms
	setb	D4	
	setb	D5
	clr	D6
	clr	D7	;0011
	setb	E
	nop	

	clr	E

	acall	delay15ms
	clr	D4	
	setb	D5
	clr	D6
	clr	D7	;0010
	setb	E
	nop	

	clr	E
	;----------------------
	
	mov	a,#28h			;funcion					
	acall	Send_Inst

	mov	a,#06h			;entrymode
	acall	Send_inst

	acall	DisplayON

	acall	clear
		
	RET

;--------------------------------------------------------------------------------------------------------------------------------------------------
;Esta rotina manda a operação de ligar o display (0000 1111B = 0000  1DCB) ,onde Liga (D=1) ou desliga display (D=0),Liga(C=1) ou desliga cursor (C=0), ;Cursor Piscante(B=1) se C=1 )
;Novamente esse byte é mandado em niblles dentro do send_ints
;--------------------------------------------------------------------------------------------------------------------------------------------------	
displayON:
	mov		a,#0Fh		
	acall	SEND_INST
	RET

;--------------------------------------------------------------------------------------------------------------------------------------------------
;Esta rotina manda a operação de desliga o display (0000 1000B = 0000  1DCB) ,onde Liga (D=1) ou desliga display (D=0),Liga(C=1) ou desliga cursor (C=0), ;Cursor Piscante(B=1) se C=1 )
;Novamente esse byte é mandado em niblles dentro do send_ints
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
displayOFF:
	mov		a,#08h		
	acall	SEND_INST
	RET

;--------------------------------------------------------------------------------------------------------------------------------------------------
;Limpa todo o display e retorna o cursor para a primeira posição da primeira linha
;--------------------------------------------------------------------------------------------------------------------------------------------------
clear:
	mov	a,#01h		;0000 0001b	;Clear		 
	acall	SEND_INST
	ret	

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
homeCursor:
	mov	a,#02h 		;0000 001x  ; retornar o curso a linhaxcoluna - 1x1
	acall	send_inst
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
cursorLEFT:
	mov	a,#10h		;Move o curso (C=0) para a esquerda(R=0)
	acall 	send_inst
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
cursorRIGHT:
	mov	a,#14h		; Move o curso (C=0) para a direita(R=1)
	acall 	send_inst
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
espaco:
	mov	a,#' '		; Move o curso (C=0) para a direita(R=1)
	acall 	send_Data
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
SegundaLinha:
	mov	a,#0C0h		;1AAA AAAA ; para mover para segunda linha colocamos o endereço em 40h ou seja a = C0h
	acall 	send_inst
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
msgLEFT:
	mov	a,#18h		;Move o MENSSAGEM  E O CURSOR (C=1) para a ESQUERDA(R=0), isto é a messnagem é vista sendo deslocada da esquerda para a
	acall 	send_inst	;direita
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
msgRIGHT:
	mov	a,#1Ch		;Move o MENSSAGEM E O CURSOR (C=1) para a DIREITA(R=1), isto é a messnagem é vista sendo deslocada da direita para a 	
	acall 	send_inst	;esquerda
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
escreveTabela:
	PUSH	ACC
	mov 	dptr,#WORDS
auxt:
	MOV	A,#00H
	MOVC	A,@A+dptr
	Cjne	A,#00h,envia
	jmp 	fim
envia:
	acall	send_data
	inc	dptr
	MOV	A,#00H
	jmp	auxt
fim:	
	pop	ACC
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
Position:	
	;pega valor do registrador B (b.7 informa qual a linha e o restante a coluna)		
	push	acc
	mov	a,b
	jnb	a.7,Line1
Line2:
	clr	acc.7
	add	a,#3fh		;soma o valor da coluna com o ultimo valor da linha 1
	setb	acc.7
	ajmp	column
Line1:
	subb	a,#00000001b
	setb	a.7
Column:
	acall	Send_Inst
	pop	acc
	ret
Send_Data:
	PUSH	ACC
	CALL	busy_check
	POP	ACC
	clr	RW
	setb	RS
	call	swapBitsEnvio
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
Send_Inst:
	PUSH	ACC
	CALL	busy_check
	POP	ACC
	clr	RW
	clr	RS
	call	swapBitsEnvio
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
Busy_Check:
	setb	RW
	clr	RS
	acall	aux
	RLC	A
	MOV	B.7,c
	RLC	A
	MOV	B.6,c
	RLC	A
	MOV	B.5,c
	RLC	A
	MOV	B.4,c
	acall	aux
	RLC	A
	MOV	B.3,c
	RLC	A
	MOV	B.2,c
	RLC	A
	MOV	B.1,c
	RLC	A
	MOV	B.0,c
	MOV 	A,B
	jb	ACC.7,Busy_Check	
	RET
aux:
	setb	D7
	setb	D6
	setb	D5
	setb	D4
	setb	E
	nop
	mov	A,P1
	clr	E	
	ret

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
swapBitsEnvio:
	CALL	AUXSWAP
	CALL	AUXSWAP	
	RET

;--------------------------------------------------------------------------------------------------------------------------------------------------
;
;
;
;
;
;--------------------------------------------------------------------------------------------------------------------------------------------------
AUXSWAP:
	RLC  A
	mov D7,C
	RLC  A
	mov D6,C
	RLC  A
	mov D5,C
	RLC  A
	mov D4,C
	setb	E
	nop
	clr	E
	ret


;-----------------------------------------------
delay1ms:		;2
	mov	a,#0F8h	;1
	djnz	acc,$	;248*2
	mov	a,#0F9h ;1
	djnz	acc,$	;249*2	
	ret		;2
			;1000 us = 1 ms
;-----------------------------------------------
delay15ms:		;2
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	acall	delay1ms
	ret
;-----------------------------------------------
	;Dados memória de programa
WORDS:
	db 'QUEM EH LEONARDO ?',00H
end

